notes06.txt

JOINING DATA W PANDAS or MERGING TABLES, same terms


MERGE method 
col to merge on?
c'e two diff datasets, merge on an index-like col taht is common to both

mergedFrame = old1.merge(old2, on="indexCol")

- First table's columns will show first mergedFrame, then 2nd
- The rows in mergedTable have matching values for the chosen column in both tables.
- Column names are still unique, any matching are now col_x and col_y, specifying their source
- to change how matching cols get suffixed : 
    newMerged = table1.merge(table2, on='indexCol', suffixes=('_first', '_next'))

- .value_counts gets the most-populated columns methinks
- .shape gets number of rows

ONE TO MANY relshps
one to one = e/ row in L table =~ ONLY one row in R
one to many= e/ row in L table =~ MORE THAN ONE row in R

t.ex - City table, Business table. each city has lots busns, lets claim a busns can only be in one City

MERGING MULTIPLE TABLES
First two tables
merge on COMBO of data, a LIST, to keep values unique & not erroneous

mergedTable = grants.merge(liceneses, on = ['address','zip'])
    result will just have first TWO columns be those list pairs.

Now for a third table, here we have a 'ward' col name and add suffixes

################################

LEFT JOIN w pNDAS
LEFT join will return ALL rows from Left table,
and ONLY those from R table where they match the key column we specified
SO LEFT JOINS will probably have NULLS in those rows where the R table didnt have any matches

OUTPUT of a 1to1 merge w Left join will have 

OUTER JOIN  finds all rows in all tables, even if dont match

OUTER JOIN cb used to find any row that is in one but NOT both tables

#####################
3  SELF JOIN
use case - sequels to a movie. sequelId listed in its own col but we want to see its name
evn tho the name lives in current table
so, to duplicate data already in the table, into a different COLUMN basically
    just to illustrate that relship clearer.

Can use the default inner join, but can also self/join using RIGHT or LEFT ones

###############################
4 MERGING ON INDEXES

make sure you use right_index = True
left_index = True
right_index = True

if dt starts in csv, can just use index_col arg of read_csv method as ours index
doesnt matter what the index col is, the merge method adjusts to use index names OR col names

### Merging on MULTIINDEX

sam_casts = sam.merge(casts, on=['movie_id','cast_id'])
this is an inner join so all rows returned must match both movie and cast id
if index is diff btwn 2 tables we merge, we can use right on and left on

and if right on or L on is an index, use
    left_index=True

####################################################################
####################################################################
3. FILTERING JOINS 
so far we only mutated joins, ie combine dt fr tables based on matching observations
now we try to filter observations based on if they match an observtn from another table
Pandas cant do this itself, we must replicate this actions

###################
SEMI-JOIN  filter Left table to ONLY cols in Left table,
    & rows where a col in R table matches
No cols from R are shown
Also, theres no duplicates shown, even if theres a one to many relship


################
ANTI JOIN - find which rows are in L table but NOT R table,
returns ONLY col from L table, none from R 

INDICATOR method adds a column "_merge" to the output, showing: BOTH, LEFT_ONLY, RIGHT_ONLY

##################
CONNECT TABLES VERTICALLY 





